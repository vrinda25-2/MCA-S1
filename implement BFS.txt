 #include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 100
struct Queue {
    int items[MAX_SIZE];
    int front;
    int rear;
};
void enqueue(struct Queue *q, int value);
int dequeue(struct Queue *q);
int isEmpty(struct Queue *q);
void BFS(int graph[MAX_SIZE][MAX_SIZE], int vertices, int startVertex);
int main() {
    int vertices, startVertex;
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &vertices);
    int graph[MAX_SIZE][MAX_SIZE];
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            scanf("%d", &graph[i][j]);
        }
    }
    printf("Enter the starting vertex for BFS: ");
    scanf("%d", &startVertex);
    printf("Breadth-First Search (BFS) starting from vertex %d:\n", startVertex);
    BFS(graph, vertices, startVertex);
    return 0;
}
void enqueue(struct Queue *q, int value) {
    if (q->rear == MAX_SIZE - 1) {
        printf("Queue is full.\n");
    } else {
        if (q->front == -1) {
            q->front = 0;
        }
        q->rear++;
        q->items[q->rear] = value;
    }
}
int dequeue(struct Queue *q) {
    int item;
    if (isEmpty(q)) {
        printf("Queue is empty.\n");
        item = -1;
    } else {
        item = q->items[q->front];
        q->front++;
        if (q->front > q->rear) {
            q->front = q->rear = -1;
        }
    }
    return item;
}
int isEmpty(struct Queue *q) {
    return (q->front == -1);
}
void BFS(int graph[MAX_SIZE][MAX_SIZE], int vertices, int startVertex) {
    struct Queue q;
    q.front = -1;
    q.rear = -1;
    int visited[MAX_SIZE] = {0};
    visited[startVertex] = 1;
    enqueue(&q, startVertex);
    while (!isEmpty(&q)) {
        int currentVertex = dequeue(&q);
        printf("%d ", currentVertex);
        for (int i = 0; i < vertices; i++) {
            if (graph[currentVertex][i] == 1 && !visited[i]) {
                visited[i] = 1;
                enqueue(&q, i);
            }
        }
    }
    printf("\n");
}

